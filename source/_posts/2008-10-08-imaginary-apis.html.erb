---
title: "Imaginary APIs"
date: 2008-10-08
comments: false
---

<div class='blogger'>
  <div class='post'>
    <p>As promised, I will explain my favorite way to design APIs. I call it &quot;imaginary APIs&quot;. I'm far from the first person to have thought of this and I've even seen this used in practice by others, but I have no idea if there is an official name for it.</p>  <p>In short, the idea is that you write code which consumes an imaginary API and then you imagine it works. Then, you write some more code which does something more advanced with your imaginary API and imagine that works too. Then, you figure out how to get your magic code to compile, run, and work.</p>  <p>Success is measured by how closely your final API matches your imaginary API and by how much you need to modify your magic code to be a working sample you can ship along side your API. That's it.</p>  <p>As an example, let's imagine an API for a simple home movie editing program. I'm sorry about the excessively narrow blog formatting.</p>  <p><font face="Courier New">var video = new Movie();     <br />video.StoryBoard.Add(      <br />&#160;&#160;&#160; Image.FromFile(&quot;title.png&quot;));      <br />video.StoryBoard.Add(      <br />&#160;&#160;&#160; new CrossFade(TimeSpan.FromSeconds(2.0f)));      <br />video.StoryBoard.Add(      <br />&#160;&#160;&#160; Movie.FromFile(&quot;scene1.wmv&quot;));      <br />video.StoryBoard.Add(      <br />&#160;&#160;&#160; Movie.FromFile(&quot;scene2.mpg&quot;));      <br />view.Export(&quot;myMovie.avi&quot;);</font></p>  <p>A lot of voodoo is going to have to happen behind the scenes to make this code work! But you will thank yourself when you need to implement the UI and your client developers will thank you when they want to generate a highly customized slide show or develop a nifty flip book drawing application. </p>    </div>
  <h2>Comments</h2>
  <div class='comments'>
    <div class='comment'>
      <div class='author'>dfj225</div>    <div class='content'>
    I think you might be able to consider "imaginary APIs" as a type of test driven development.<BR/><BR/>No matter what you call it, I think it's a good way to start developing a clean API.<BR/><BR/>(On a random note, the captcha for this comment is 'ggsux'. Is Google self bashing now?)      </div>
    </div>
    <div class='comment'>
      <div class='author'>Brandon Bloom</div>    <div class='content'>
    It definitely is a form of test driven development; good call. <BR/><BR/>However, I think the key difference is that real tests need to compile and run. Imaginary APIs can exist in an email or document and never actually need to be compiled. But yes, the next step from here is unit tests :-)      </div>
    </div>
</div>
